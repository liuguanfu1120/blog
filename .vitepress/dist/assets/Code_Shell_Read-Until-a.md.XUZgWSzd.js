import{_ as s,o as a,c as i,R as n}from"./chunks/framework.NgETwM1V.js";const b=JSON.parse('{"title":"How to let a shell script do not proceed until \\"a\\" is input","description":"","frontmatter":{"prev":false,"next":{"text":"Caveates on tee","link":"/Code/Shell/tee"}},"headers":[],"relativePath":"Code/Shell/Read-Until-a.md","filePath":"Code/Shell/Read-Until-a.md"}'),e={name:"Code/Shell/Read-Until-a.md"},t=n(`<h1 id="how-to-let-a-shell-script-do-not-proceed-until-a-is-input" tabindex="-1">How to let a shell script do not proceed until &quot;a&quot; is input <a class="header-anchor" href="#how-to-let-a-shell-script-do-not-proceed-until-a-is-input" aria-label="Permalink to &quot;How to let a shell script do not proceed until &quot;a&quot; is input&quot;">â€‹</a></h1><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Initialize the variable a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use a while loop to read input until a is set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-z</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Enter a value for &#39;a&#39;.&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    read</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Print the value of a</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You entered: </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>DO NOT</strong> use &quot;read -p&quot;!</p><ul><li>In bash: &quot;-p&quot; means add a prompt</li><li>In zsh: &quot;-p&quot; means input from a coprocess</li></ul><p>If you in a terminal uses zsh and source a shell script containing &quot;read -p&quot;:</p><div class="language-zsh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:2: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-p:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> no</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> coprocess</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>In summary, just use &quot;echo&quot; before read a variable from the input.</p>`,7),l=[t];function p(h,r,o,d,k,c){return a(),i("div",null,l)}const g=s(e,[["render",p]]);export{b as __pageData,g as default};
