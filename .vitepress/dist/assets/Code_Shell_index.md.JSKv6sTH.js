import{_ as e,o as a,c as t,R as o}from"./chunks/framework.NgETwM1V.js";const f=JSON.parse('{"title":"Shell index","description":"","frontmatter":{"prev":{"text":"Fortran","link":"/Code/Fortran/index"},"next":{"text":"Git","link":"/Code/Git/index"}},"headers":[],"relativePath":"Code/Shell/index.md","filePath":"Code/Shell/index.md"}'),n={name:"Code/Shell/index.md"},i=o('<h1 id="shell-index" tabindex="-1">Shell index <a class="header-anchor" href="#shell-index" aria-label="Permalink to &quot;Shell index&quot;">​</a></h1><h2 id="some-tricks" tabindex="-1">Some tricks <a class="header-anchor" href="#some-tricks" aria-label="Permalink to &quot;Some tricks&quot;">​</a></h2><p><a href="./Read-Until-a.html">Proceed until &quot;a&quot; is input</a></p><p>You may want you shell scripts wait for you input for a variable like &quot;a&quot; before proceeding. It often happens when you write a pipline that you should give the observed data file name.</p><h2 id="some-useful-commands" tabindex="-1">Some useful commands <a class="header-anchor" href="#some-useful-commands" aria-label="Permalink to &quot;Some useful commands&quot;">​</a></h2><p><a href="./tee.html">Caveats on tee</a></p><p>tee: read from standard input and write to standard output and files.</p><p><a href="./rsync.html">rsync: fast copy</a></p><p>rsync: a fast and extraordinarily versatile file copying tool.</p>',9),r=[i];function s(l,d,c,h,p,u){return a(),t("div",null,r)}const _=e(n,[["render",s]]);export{f as __pageData,_ as default};
